"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./utils/logging.ts":
/*!**************************!*\
  !*** ./utils/logging.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Log: () => (/* binding */ Log)\n/* harmony export */ });\n// Allowed values for parameters\nconst VALID_STACKS = [\n    \"frontend\",\n    \"backend\"\n];\nconst VALID_LEVELS = [\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\",\n    \"fatal\"\n];\nconst VALID_FRONTEND_PACKAGES = [\n    \"api\",\n    \"component\",\n    \"page\",\n    \"state\",\n    \"style\",\n    \"hook\"\n];\nconst VALID_BACKEND_PACKAGES = [\n    \"cache\",\n    \"controller\",\n    \"db\",\n    \"job\",\n    \"handler\",\n    \"repository\",\n    \"service\"\n];\nconst VALID_SHARED_PACKAGES = [\n    \"auth\",\n    \"config\",\n    \"middleware\",\n    \"utils\"\n];\n// Input validation functions\nconst isValidStack = (stack)=>{\n    return VALID_STACKS.includes(stack);\n};\nconst isValidLevel = (level)=>{\n    return VALID_LEVELS.includes(level);\n};\nconst isValidPackage = (pkg, stack)=>{\n    if (stack === \"frontend\") {\n        return [\n            ...VALID_FRONTEND_PACKAGES,\n            ...VALID_SHARED_PACKAGES\n        ].includes(pkg);\n    }\n    return false;\n};\n/**\r\n * Log function for sending logs to evaluation service\r\n * @param stack - Application stack (frontend/backend)\r\n * @param level - Log level (debug/info/warn/error/fatal)\r\n * @param pkg - Package name (component/api/etc)\r\n * @param message - Log message\r\n */ const Log = async (stack, level, pkg, message)=>{\n    // Convert to lowercase\n    const stackLower = stack.toLowerCase();\n    const levelLower = level.toLowerCase();\n    const pkgLower = pkg.toLowerCase();\n    // Validate inputs\n    if (!isValidStack(stackLower)) {\n        console.error(`Invalid stack: ${stack}. Must be one of: ${VALID_STACKS.join(\", \")}`);\n        return;\n    }\n    if (!isValidLevel(levelLower)) {\n        console.error(`Invalid level: ${level}. Must be one of: ${VALID_LEVELS.join(\", \")}`);\n        return;\n    }\n    if (!isValidPackage(pkgLower, stackLower)) {\n        console.error(`Invalid package: ${pkg} for stack: ${stack}`);\n        return;\n    }\n    // Prepare log data\n    const logData = {\n        stack: stackLower,\n        level: levelLower,\n        package: pkgLower,\n        message\n    };\n    try {\n        // Use dynamic import for isomorphic-fetch to support both server and client\n        const baseUrl = \"http://28.244.56.144:evaluation-service\";\n        const url = new URL(\"/logs\", baseUrl).toString();\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(logData)\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const result = await response.json();\n        // Optional: Log success in development\n        if (true) {\n            console.debug(`Log created successfully with ID: ${result.logId}`);\n        }\n    } catch (error) {\n        // Log error to console in development\n        if (true) {\n            console.error(\"Failed to send log:\", error);\n        }\n        // In client-side code, store failed logs\n        if (false) {}\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./utils/logging.ts\n");

/***/ })

});